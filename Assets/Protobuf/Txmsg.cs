// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: txmsg.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from txmsg.proto</summary>
public static partial class TxmsgReflection {

  #region Descriptor
  /// <summary>File descriptor for txmsg.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static TxmsgReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgt0eG1zZy5wcm90byIiChFMRENyZWF0ZUFjY291bnRUeBINCgVvd25lchgB",
          "IAEoCSIbCgpMREFwcFN0YXRlEg0KBXN0YXRlGAEgASgMIiMKEkxEU3RhdGVR",
          "dWVyeVBhcmFtcxINCgVvd25lchgBIAEoCSIjChJMRFN0YXRlUXVlcnlSZXN1",
          "bHQSDQoFc3RhdGUYASABKAwiQgoRTERSb2xsUXVlcnlQYXJhbXMSDQoFb3du",
          "ZXIYASABKAkSDgoGYmV0QmlnGAIgASgIEg4KBmFtb3VudBgDIAEoBSI/ChFM",
          "RFJvbGxRdWVyeVJlc3VsdBINCgVwb2ludBgBIAEoBRILCgN3aW4YAiABKAgS",
          "DgoGYW1vdW50GAMgASgFIiIKEUxEQ2hpcFF1ZXJ5UGFyYW1zEg0KBW93bmVy",
          "GAEgASgJIiMKEUxEQ2hpcFF1ZXJ5UmVzdWx0Eg4KBmFtb3VudBgBIAEoBWIG",
          "cHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::LDCreateAccountTx), global::LDCreateAccountTx.Parser, new[]{ "Owner" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LDAppState), global::LDAppState.Parser, new[]{ "State" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LDStateQueryParams), global::LDStateQueryParams.Parser, new[]{ "Owner" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LDStateQueryResult), global::LDStateQueryResult.Parser, new[]{ "State" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LDRollQueryParams), global::LDRollQueryParams.Parser, new[]{ "Owner", "BetBig", "Amount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LDRollQueryResult), global::LDRollQueryResult.Parser, new[]{ "Point", "Win", "Amount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LDChipQueryParams), global::LDChipQueryParams.Parser, new[]{ "Owner" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LDChipQueryResult), global::LDChipQueryResult.Parser, new[]{ "Amount" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class LDCreateAccountTx : pb::IMessage<LDCreateAccountTx> {
  private static readonly pb::MessageParser<LDCreateAccountTx> _parser = new pb::MessageParser<LDCreateAccountTx>(() => new LDCreateAccountTx());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LDCreateAccountTx> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TxmsgReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDCreateAccountTx() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDCreateAccountTx(LDCreateAccountTx other) : this() {
    owner_ = other.owner_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDCreateAccountTx Clone() {
    return new LDCreateAccountTx(this);
  }

  /// <summary>Field number for the "owner" field.</summary>
  public const int OwnerFieldNumber = 1;
  private string owner_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Owner {
    get { return owner_; }
    set {
      owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LDCreateAccountTx);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LDCreateAccountTx other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Owner != other.Owner) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Owner.Length != 0) hash ^= Owner.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Owner.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Owner);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Owner.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LDCreateAccountTx other) {
    if (other == null) {
      return;
    }
    if (other.Owner.Length != 0) {
      Owner = other.Owner;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Owner = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class LDAppState : pb::IMessage<LDAppState> {
  private static readonly pb::MessageParser<LDAppState> _parser = new pb::MessageParser<LDAppState>(() => new LDAppState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LDAppState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TxmsgReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDAppState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDAppState(LDAppState other) : this() {
    state_ = other.state_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDAppState Clone() {
    return new LDAppState(this);
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 1;
  private pb::ByteString state_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString State {
    get { return state_; }
    set {
      state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LDAppState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LDAppState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (State != other.State) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (State.Length != 0) hash ^= State.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (State.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(State);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (State.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(State);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LDAppState other) {
    if (other == null) {
      return;
    }
    if (other.State.Length != 0) {
      State = other.State;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          State = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class LDStateQueryParams : pb::IMessage<LDStateQueryParams> {
  private static readonly pb::MessageParser<LDStateQueryParams> _parser = new pb::MessageParser<LDStateQueryParams>(() => new LDStateQueryParams());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LDStateQueryParams> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TxmsgReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDStateQueryParams() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDStateQueryParams(LDStateQueryParams other) : this() {
    owner_ = other.owner_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDStateQueryParams Clone() {
    return new LDStateQueryParams(this);
  }

  /// <summary>Field number for the "owner" field.</summary>
  public const int OwnerFieldNumber = 1;
  private string owner_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Owner {
    get { return owner_; }
    set {
      owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LDStateQueryParams);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LDStateQueryParams other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Owner != other.Owner) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Owner.Length != 0) hash ^= Owner.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Owner.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Owner);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Owner.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LDStateQueryParams other) {
    if (other == null) {
      return;
    }
    if (other.Owner.Length != 0) {
      Owner = other.Owner;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Owner = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class LDStateQueryResult : pb::IMessage<LDStateQueryResult> {
  private static readonly pb::MessageParser<LDStateQueryResult> _parser = new pb::MessageParser<LDStateQueryResult>(() => new LDStateQueryResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LDStateQueryResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TxmsgReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDStateQueryResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDStateQueryResult(LDStateQueryResult other) : this() {
    state_ = other.state_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDStateQueryResult Clone() {
    return new LDStateQueryResult(this);
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 1;
  private pb::ByteString state_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString State {
    get { return state_; }
    set {
      state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LDStateQueryResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LDStateQueryResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (State != other.State) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (State.Length != 0) hash ^= State.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (State.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(State);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (State.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(State);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LDStateQueryResult other) {
    if (other == null) {
      return;
    }
    if (other.State.Length != 0) {
      State = other.State;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          State = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class LDRollQueryParams : pb::IMessage<LDRollQueryParams> {
  private static readonly pb::MessageParser<LDRollQueryParams> _parser = new pb::MessageParser<LDRollQueryParams>(() => new LDRollQueryParams());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LDRollQueryParams> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TxmsgReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDRollQueryParams() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDRollQueryParams(LDRollQueryParams other) : this() {
    owner_ = other.owner_;
    betBig_ = other.betBig_;
    amount_ = other.amount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDRollQueryParams Clone() {
    return new LDRollQueryParams(this);
  }

  /// <summary>Field number for the "owner" field.</summary>
  public const int OwnerFieldNumber = 1;
  private string owner_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Owner {
    get { return owner_; }
    set {
      owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "betBig" field.</summary>
  public const int BetBigFieldNumber = 2;
  private bool betBig_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool BetBig {
    get { return betBig_; }
    set {
      betBig_ = value;
    }
  }

  /// <summary>Field number for the "amount" field.</summary>
  public const int AmountFieldNumber = 3;
  private int amount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Amount {
    get { return amount_; }
    set {
      amount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LDRollQueryParams);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LDRollQueryParams other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Owner != other.Owner) return false;
    if (BetBig != other.BetBig) return false;
    if (Amount != other.Amount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Owner.Length != 0) hash ^= Owner.GetHashCode();
    if (BetBig != false) hash ^= BetBig.GetHashCode();
    if (Amount != 0) hash ^= Amount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Owner.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Owner);
    }
    if (BetBig != false) {
      output.WriteRawTag(16);
      output.WriteBool(BetBig);
    }
    if (Amount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Amount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Owner.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
    }
    if (BetBig != false) {
      size += 1 + 1;
    }
    if (Amount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LDRollQueryParams other) {
    if (other == null) {
      return;
    }
    if (other.Owner.Length != 0) {
      Owner = other.Owner;
    }
    if (other.BetBig != false) {
      BetBig = other.BetBig;
    }
    if (other.Amount != 0) {
      Amount = other.Amount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Owner = input.ReadString();
          break;
        }
        case 16: {
          BetBig = input.ReadBool();
          break;
        }
        case 24: {
          Amount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class LDRollQueryResult : pb::IMessage<LDRollQueryResult> {
  private static readonly pb::MessageParser<LDRollQueryResult> _parser = new pb::MessageParser<LDRollQueryResult>(() => new LDRollQueryResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LDRollQueryResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TxmsgReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDRollQueryResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDRollQueryResult(LDRollQueryResult other) : this() {
    point_ = other.point_;
    win_ = other.win_;
    amount_ = other.amount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDRollQueryResult Clone() {
    return new LDRollQueryResult(this);
  }

  /// <summary>Field number for the "point" field.</summary>
  public const int PointFieldNumber = 1;
  private int point_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Point {
    get { return point_; }
    set {
      point_ = value;
    }
  }

  /// <summary>Field number for the "win" field.</summary>
  public const int WinFieldNumber = 2;
  private bool win_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Win {
    get { return win_; }
    set {
      win_ = value;
    }
  }

  /// <summary>Field number for the "amount" field.</summary>
  public const int AmountFieldNumber = 3;
  private int amount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Amount {
    get { return amount_; }
    set {
      amount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LDRollQueryResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LDRollQueryResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Point != other.Point) return false;
    if (Win != other.Win) return false;
    if (Amount != other.Amount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Point != 0) hash ^= Point.GetHashCode();
    if (Win != false) hash ^= Win.GetHashCode();
    if (Amount != 0) hash ^= Amount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Point != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Point);
    }
    if (Win != false) {
      output.WriteRawTag(16);
      output.WriteBool(Win);
    }
    if (Amount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Amount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Point != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
    }
    if (Win != false) {
      size += 1 + 1;
    }
    if (Amount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LDRollQueryResult other) {
    if (other == null) {
      return;
    }
    if (other.Point != 0) {
      Point = other.Point;
    }
    if (other.Win != false) {
      Win = other.Win;
    }
    if (other.Amount != 0) {
      Amount = other.Amount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Point = input.ReadInt32();
          break;
        }
        case 16: {
          Win = input.ReadBool();
          break;
        }
        case 24: {
          Amount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class LDChipQueryParams : pb::IMessage<LDChipQueryParams> {
  private static readonly pb::MessageParser<LDChipQueryParams> _parser = new pb::MessageParser<LDChipQueryParams>(() => new LDChipQueryParams());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LDChipQueryParams> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TxmsgReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDChipQueryParams() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDChipQueryParams(LDChipQueryParams other) : this() {
    owner_ = other.owner_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDChipQueryParams Clone() {
    return new LDChipQueryParams(this);
  }

  /// <summary>Field number for the "owner" field.</summary>
  public const int OwnerFieldNumber = 1;
  private string owner_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Owner {
    get { return owner_; }
    set {
      owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LDChipQueryParams);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LDChipQueryParams other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Owner != other.Owner) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Owner.Length != 0) hash ^= Owner.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Owner.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Owner);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Owner.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LDChipQueryParams other) {
    if (other == null) {
      return;
    }
    if (other.Owner.Length != 0) {
      Owner = other.Owner;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Owner = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class LDChipQueryResult : pb::IMessage<LDChipQueryResult> {
  private static readonly pb::MessageParser<LDChipQueryResult> _parser = new pb::MessageParser<LDChipQueryResult>(() => new LDChipQueryResult());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LDChipQueryResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::TxmsgReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDChipQueryResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDChipQueryResult(LDChipQueryResult other) : this() {
    amount_ = other.amount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LDChipQueryResult Clone() {
    return new LDChipQueryResult(this);
  }

  /// <summary>Field number for the "amount" field.</summary>
  public const int AmountFieldNumber = 1;
  private int amount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Amount {
    get { return amount_; }
    set {
      amount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LDChipQueryResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LDChipQueryResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Amount != other.Amount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Amount != 0) hash ^= Amount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Amount != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Amount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Amount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LDChipQueryResult other) {
    if (other == null) {
      return;
    }
    if (other.Amount != 0) {
      Amount = other.Amount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Amount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
